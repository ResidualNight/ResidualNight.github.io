<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>R.I.P. Avicii ◢ ◤</title>
      <link href="/2019/06/06/Avicii/"/>
      <url>/2019/06/06/Avicii/</url>
      
        <content type="html"><![CDATA[<p>2019.6.6北京时间23:00:00(当地时间17:00:00)，Avicii的遗作专辑<code>&lt;Tim&gt;</code>发布。希望这永远不是鸽王的最后一张专辑。</p><a id="more"></a><p>曲目列表：(12 songs)</p><ul><li>Peace Of Mind</li><li>Heaven</li><li>SOS</li><li>Tough Love</li><li>Bad Reputation</li><li>Ain’t A Thing</li><li>Hold The Line</li><li>Freak</li><li>Excuse Me Mr Sir</li><li>Heart Upon My Sleeve</li><li>Never Leave Me</li><li>Fades Away</li></ul><p>Rest in Peace.</p><p><img src="https://i.loli.net/2019/04/28/5cc5a73b9898d.jpeg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七下·生物复习1</title>
      <link href="/2019/04/04/%E4%B8%83%E4%B8%8B%C2%B7%E7%94%9F%E7%89%A9%E5%A4%8D%E4%B9%A0/"/>
      <url>/2019/04/04/%E4%B8%83%E4%B8%8B%C2%B7%E7%94%9F%E7%89%A9%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1-1-人的由来-人类的起源和发展"><a href="#4-1-1-人的由来-人类的起源和发展" class="headerlink" title="4.1.1  人的由来.人类的起源和发展"></a>4.1.1  人的由来.人类的起源和发展</h1><h2 id="人类起源的观点"><a href="#人类起源的观点" class="headerlink" title="人类起源的观点"></a>人类起源的观点</h2><h3 id="神创论"><a href="#神创论" class="headerlink" title="神创论"></a>神创论</h3><ul><li><p>科学技术相对落后的古代</p></li><li><p>人们认为人是由神创造的</p></li><li><p>生物间<strong>无任何亲缘</strong>关系</p></li></ul><h3 id="进化论"><a href="#进化论" class="headerlink" title="进化论"></a>进化论</h3><ul><li>建立者：达尔文</li><li>提出了人和现代类人猿的共同祖先是森林古猿</li></ul><a id="more"></a><h2 id="现代类人猿与人类"><a href="#现代类人猿与人类" class="headerlink" title="现代类人猿与人类"></a>现代类人猿与人类</h2><p><u>能否制造和使用工具是人和动物的<strong>本质区别</strong></u></p><h3 id="现代类人猿"><a href="#现代类人猿" class="headerlink" title="现代类人猿"></a>现代类人猿</h3><p>长臂猿、猩猩、大猩猩、黑猩猩</p><ul><li>臂行</li><li><p>生活在热带、亚热带丛林</p></li><li><p>会使用天然工具，但不会制造工具</p></li><li><p>脑容量小，无语言文字能力</p></li></ul><h3 id="人类"><a href="#人类" class="headerlink" title="人类"></a>人类</h3><ul><li>直立行走</li><li>生活在农村、城市</li><li>制造并使用各种简单和复杂的工具</li><li>脑容量大，有很强的思维能力和语言文字能力</li></ul><h3 id="现代类人猿与人类的相似"><a href="#现代类人猿与人类的相似" class="headerlink" title="现代类人猿与人类的相似"></a>现代类人猿与人类的相似</h3><ul><li>复杂的大脑和宽阔的胸阔</li><li>与人类相似的面部表情和骨骼成分</li><li>行为表现及寿命长短</li><li>共同祖先——森林古猿</li><li>……</li></ul><h2 id="森林古猿"><a href="#森林古猿" class="headerlink" title="森林古猿"></a>森林古猿</h2><ul><li>距今1200多万年前</li><li>树栖为主的生活</li><li>靠前肢攀援和采集食物<ul><li>野果</li><li>嫩芽</li><li>树叶</li><li>昆虫</li><li>……</li></ul></li><li>生活方式与现代类人猿基本相同</li></ul><h2 id="从猿到人的进化"><a href="#从猿到人的进化" class="headerlink" title="从猿到人的进化"></a>从猿到人的进化</h2><h3 id="—-gt-现代类人猿"><a href="#—-gt-现代类人猿" class="headerlink" title="—&gt;现代类人猿"></a>—&gt;现代类人猿</h3><p>少量森林古猿一直过着<strong>树栖</strong>的生活，经过漫长的年代进化成现代类人猿。</p><h3 id="—-gt-人类"><a href="#—-gt-人类" class="headerlink" title="—&gt;人类"></a>—&gt;人类</h3><p>地壳运动剧烈，地形气候发生变化，一些热带丛林变成稀树草原，一部分森林古猿不得不<strong>下地生活</strong>。下地生活的森林古猿形态结构、生活习性也逐渐发生变化，逐渐进化成人类。</p><h4 id="发展变化"><a href="#发展变化" class="headerlink" title="发展变化"></a>发展变化</h4><p><strong>行走方式</strong>    半直立行走—&gt;直立行走   【人猿分界的重要标志】</p><p><strong>工具使用</strong>    不会使用工具—&gt;使用自然工具—&gt;制造和使用简单工具—&gt;制造和使用各种复杂工具</p><p><strong>衣着</strong>        赤身裸体—&gt;懂得御寒、遮羞—&gt;穿衣美观</p><p>(直立行走)—&gt;前肢解放，使用制造工具—&gt;(使用火改善营养)—&gt;大脑越来越发达—&gt;(语言交流)—&gt;人类越来越强大</p><h4 id="证据"><a href="#证据" class="headerlink" title="证据"></a>证据</h4><p>在东非大裂谷地区发现了许多早期古人类化石，说明这一地区在远古时期曾经是古人类活动的地方</p><p>距今300万年前的少女露西的骨骼化石</p><p>175万年前的古人类的遗物化石、石器化石</p><h2 id="事实与观点"><a href="#事实与观点" class="headerlink" title="事实与观点"></a>事实与观点</h2><h3 id="事实"><a href="#事实" class="headerlink" title="事实"></a>事实</h3><p>事情的真实情况，包括事物、事件、事态，即客观存在的一切物体&amp;假象</p><p>e.g.:    穿金戴银。</p><h3 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h3><p>指从一定的立场/角度出发，对事物/问题所持的看法</p><p>e.g.:    八成是个富二代。</p><h3 id="事实-amp-观点的联系"><a href="#事实-amp-观点的联系" class="headerlink" title="事实&amp;观点的联系"></a>事实&amp;观点的联系</h3><p>人们的观点是根据事实提出的。</p><p>对于同一个问题，因为研究的方法和手段不同，可能会发现不同的事实，提出不同的观点。</p><p>对于同一个事实，不同的人可能会有不同的观点。</p><h1 id="4-1-2-人的由来-人的生殖"><a href="#4-1-2-人的由来-人的生殖" class="headerlink" title="4.1.2 人的由来.人的生殖"></a>4.1.2 人的由来.人的生殖</h1><h2 id="生殖系统"><a href="#生殖系统" class="headerlink" title="生殖系统"></a>生殖系统</h2><h3 id="男性生殖系统"><a href="#男性生殖系统" class="headerlink" title="男性生殖系统"></a>男性生殖系统</h3><h4 id="内生殖器"><a href="#内生殖器" class="headerlink" title="内生殖器"></a>内生殖器</h4><ul><li><strong>睾丸</strong>：男性的<strong>主要生殖器官</strong>，产生<u>精子</u>，分泌雄性激素</li><li><strong>附睾</strong>：贮存&amp;输送精子</li><li><strong>输精管</strong>：一条细长的管道，左右各一条，输送精子</li><li><strong>精囊腺&amp;前列腺</strong>：分泌黏液</li></ul><h4 id="外生殖器"><a href="#外生殖器" class="headerlink" title="外生殖器"></a>外生殖器</h4><ul><li><strong>阴囊</strong>：保护睾丸和附睾</li><li><strong>阴茎</strong>：内有尿道，能排出<strong>精液&amp;尿液</strong>，能够把<strong>精子</strong>输送到女性的生殖器官<em>阴道</em>里去</li></ul><h3 id="女性生殖系统"><a href="#女性生殖系统" class="headerlink" title="女性生殖系统"></a>女性生殖系统</h3><h4 id="内生殖器-1"><a href="#内生殖器-1" class="headerlink" title="内生殖器"></a>内生殖器</h4><ul><li><strong>卵巢</strong>：女性的<strong>主要生殖器官</strong>，也是女性的性腺，产生<u>卵细胞</u>，分泌雌性激素</li><li><strong>输卵管</strong>：输送卵细胞，精子和卵细胞在其相遇并结合形成受精卵</li><li><strong>子宫</strong>：胚胎发育的场所</li><li><strong>阴道</strong>：精子进入和胎儿产出的通道，也是月经流出的通道</li></ul><h4 id="外生殖器-1"><a href="#外生殖器-1" class="headerlink" title="外生殖器"></a>外生殖器</h4><p>即外阴部</p><h3 id="男女生殖细胞对比"><a href="#男女生殖细胞对比" class="headerlink" title="男女生殖细胞对比"></a>男女生殖细胞对比</h3><table><thead><tr><th></th><th>生殖细胞</th><th>形态</th><th>大小</th><th>结构</th></tr></thead><tbody><tr><td>男性</td><td>精子</td><td>外形像蝌蚪，头大尾长，能游动</td><td>男性体内最小的细胞，用显微镜可见</td><td>头部有细胞核</td></tr><tr><td>女性</td><td>卵细胞</td><td>球形</td><td>女性特有的人体最大的细胞，肉眼可见</td><td>细胞质中有卵黄</td></tr></tbody></table><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p><u>受精的场所是输卵管，胚胎发育的场所是子宫</u></p><p><u>男性产生生殖细胞的活动没有周期性</u></p><h2 id="生殖过程"><a href="#生殖过程" class="headerlink" title="生殖过程"></a>生殖过程</h2><p>精子—&gt;输卵管<em>[精卵结合]</em>—&gt;受精卵—&gt;胚泡—&gt;子宫内膜<em>[在子宫内发育]</em>—&gt;胚胎—&gt;胎儿<em>[通过<strong>胎盘、脐带</strong>进行物质交换]</em>—&gt;新生儿诞生<em>[38周分娩]</em></p><h3 id="1-受精卵的形成"><a href="#1-受精卵的形成" class="headerlink" title="1.受精卵的形成"></a>1.受精卵的形成</h3><p>受精：精子与卵细胞结合形成受精卵的过程</p><ol><li><strong>卵巢</strong>产生卵细胞，排出后进入输卵管</li><li>精子(精液)进入阴道后，缓慢通过子宫，在<strong>输卵管</strong>内与卵细胞相遇</li><li>其中一个精子与卵细胞结合形成受精卵</li></ol><h3 id="2-胚胎发育"><a href="#2-胚胎发育" class="headerlink" title="2.胚胎发育"></a>2.胚胎发育</h3><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><ol><li><p><strong>胚胎的发育从受精卵开始</strong>，受精卵不断进行细胞分裂，逐渐发育成胚泡。</p></li><li><p>胚泡缓慢移动到子宫，最终附在<em>子宫</em>内膜上，这个过程就是怀孕</p></li></ol><p>胚泡在8周左右时间发育成胎儿(已经呈现出人的形态)</p><h4 id="营养"><a href="#营养" class="headerlink" title="营养"></a>营养</h4><ul><li>初期，由<strong>卵细胞的卵黄</strong>提供</li><li>此后，胎儿生活在羊水(子宫内半透明液体)中。通过<strong>胎盘、脐带</strong>从母体获得所需要的营养物质&amp;氧；胎儿产生的二氧化碳等废物，通过<strong>胎盘</strong>从母体排出</li></ul><h4 id="分娩"><a href="#分娩" class="headerlink" title="分娩"></a>分娩</h4><p>一般，<u>从形成受精卵开始到第38周(266 days)时，胎儿就发育成熟了</u></p><p>胎儿&amp;胎盘从母体的阴道产出，这个过程为<strong>分娩</strong></p><h1 id="4-1-3-青春期"><a href="#4-1-3-青春期" class="headerlink" title="4.1.3 青春期"></a>4.1.3 青春期</h1><h2 id="身体变化"><a href="#身体变化" class="headerlink" title="身体变化"></a>身体变化</h2><ul><li><p>指从童年到成年的过渡阶段，是生殖器官从开始迅速发育到成熟的阶段</p></li><li><p>在个体之间存在着较大差异，男孩一般比女孩玩玩玩1-2 years</p></li></ul><h3 id="发育特点"><a href="#发育特点" class="headerlink" title="发育特点"></a>发育特点</h3><p>在生长激素作用下，<u>身高突增</u>是青春期的一个显著特点。男孩和女孩的体型开始发生变化，区别也越来越明显。<u>这和<strong>睾丸分泌的雄性激素</strong>，<strong>卵巢分泌的雌性激素</strong>有关。</u></p><ul><li><strong>神经系统</strong>以及<strong>心脏</strong>和<strong>肺</strong>等器官的功能明显增强</li><li>脑的质量接近成人水平</li><li>心脏功能增强</li><li>肺活量显著增加</li></ul><h4 id="性发育"><a href="#性发育" class="headerlink" title="性发育"></a>性发育</h4><p><strong>性器官</strong>的发育&amp;<strong>性功能</strong>的成熟是青春期发育的突出特征</p><p>性器官：迅速发育、质量迅速增加</p><h4 id="遗精-amp-月经"><a href="#遗精-amp-月经" class="headerlink" title="遗精&amp;月经"></a>遗精&amp;月经</h4><p><strong>遗精</strong>：指男孩有时在睡梦中精液自尿道排出的现象[精满自溢]</p><p><strong>月经</strong>：指女孩每月一次的子宫出血现象</p><h2 id="心理变化及卫生"><a href="#心理变化及卫生" class="headerlink" title="心理变化及卫生"></a>心理变化及卫生</h2><ul><li>强烈的独立意识，遇到挫折又有依赖性</li><li>内心世界逐渐复杂</li><li>性意识开始萌动：从初期的与异性疏远，到逐渐愿意与异性接近/对异性产生朦胧的依恋</li></ul><blockquote><p>Made  By  XMFLS  WPY</p><p>2019.4</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 中学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3056 笨牛 Clumsy Cows [题解]</title>
      <link href="/2019/03/03/P3056%20%E7%AC%A8%E7%89%9BClumsy%20Cows%20%E9%A2%98%E8%A7%A3/"/>
      <url>/2019/03/03/P3056%20%E7%AC%A8%E7%89%9BClumsy%20Cows%20%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3056" target="_blank" rel="noopener">题目传送门</a></p><p>明显，这是一道用栈解决的<del>水</del>题。但是除了栈，还有另外一种简单一点的方法。</p><a id="more"></a><p>切入正题：</p><h1 id="1-栈-stack"><a href="#1-栈-stack" class="headerlink" title="1.栈(stack)"></a>1.栈(stack)</h1><p>运用<strong>STL</strong>中的<code>#include&lt;stack&gt;</code></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;类型&gt; st;</span><br><span class="line">压栈 st.push(元素);</span><br><span class="line">出栈 st.pop();</span><br><span class="line">获取栈顶元素 st.top();</span><br><span class="line">栈的大小(元素个数) st.size();</span><br><span class="line">判断栈是否为空(栈空输出<span class="literal">true</span>，反之亦然) st.empty();</span><br></pre></td></tr></table></figure><h2 id="例：判断括号是否匹配"><a href="#例：判断括号是否匹配" class="headerlink" title="例：判断括号是否匹配"></a>例：判断括号是否匹配</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>) st.push(s[i]); <span class="comment">//左括号进栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//不是左括号就是右括号</span></span><br><span class="line">            <span class="keyword">if</span>(st.empty()) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果当前栈空，莫名其妙来一个右括号即为不匹配</span></span><br><span class="line">            <span class="keyword">else</span> st.pop(); <span class="comment">//说明栈里有待匹配的左括号，弹出一个（配对成功）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><p>真是喜闻乐见的一个环节呢</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>) st.push(s[i]); <span class="comment">//左括号进栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//不是左括号就是右括号</span></span><br><span class="line">            <span class="keyword">if</span>(st.empty())&#123;st.push(<span class="string">'('</span>); ans++;&#125; <span class="comment">//注意。如果不匹配就说明需要括号反转，因此反转括号，ans++</span></span><br><span class="line">            <span class="keyword">else</span> st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!st.empty()) ans+=st.size()/<span class="number">2</span>; <span class="comment">//如果剩下一堆左括号，说明需要反转一半的才能配对成功</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-加减计数法"><a href="#2-加减计数法" class="headerlink" title="2.加减计数法"></a>2.加减计数法</h1><p>和栈的原理差不多，只不过简单易懂，不用掌握栈。时间的话<del>让我们大声喊出：STL NB!</del></p><p>左括号+1，右括号-1。如果匹配的话就是0了。</p><p>当然也有反例：<code>())(</code>单纯判断最终结果是否为0会出错WA</p><p>因此，我们可以发现：如果当前为0(栈空)再加入一个右括号那就需要反转了</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.size(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'('</span>) p++; <span class="comment">//类似进栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">//不是左括号就是右括号</span></span><br><span class="line">            <span class="keyword">if</span>(p) p--; <span class="comment">//有一个左括号等待配对，那就配对</span></span><br><span class="line">            <span class="keyword">else</span> ans++,p++; <span class="comment">//反转</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=p/<span class="number">2</span>; <span class="comment">//道理同栈</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结尾小声bb：<del>感觉题目背景尽是扯淡2333</del></p>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树 浅析</title>
      <link href="/2019/02/24/%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E6%B5%85%E6%9E%90/"/>
      <url>/2019/02/24/%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是线段树？"><a href="#什么是线段树？" class="headerlink" title="什么是线段树？"></a>什么是线段树？</h1><p>线段树是一种二叉搜索树，与区间树相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。</p><p>使用线段树可以快速的查找某一个节点在若干条线段中出现的次数，时间复杂度为O(logN）。而未优化的空间复杂度为2N，因此有时需要离散化让空间压缩。</p><a id="more"></a><h1 id="线段树模版1"><a href="#线段树模版1" class="headerlink" title="线段树模版1"></a>线段树模版1</h1><p><u> <strong>[区间最值，仅满足单点修改]</strong></u></p><p><strong>满足以下特性：</strong></p><blockquote><ol><li>树中每一个节点，代表一个区间</li><li>根节点代表一个完整的期间<code>[1,n]</code></li><li>每个叶子节点代表长度为1的区间<code>[x,x]</code>，即区间的一个元素</li><li>对于非叶子节点的每一个节点<code>[l,r]</code>，它的左儿子是<code>[l,mid]</code>，右儿子是<code>[mid+1,r]</code>。其中<code>mid=(l+r)/2</code></li><li>一个完整二叉树中，根节点p的左儿子编号为<code>p*2</code>，右儿子编号为<code>p*2+1</code>。</li></ol></blockquote><h2 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h2><p>节点声明(区间: l , r)(状态值(最值): dat)：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,dat;</span><br><span class="line">&#125;t[<span class="number">4</span>*N];</span><br></pre></td></tr></table></figure><p>建树：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> <span class="comment">//p为当前的节点编号,l r 是当前要赋给t[p]的l r</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t[p].l=l,t[p].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;t[p].dat=a[l]; <span class="keyword">return</span>;&#125; <span class="comment">//递归到叶子节点，叶子节点的最值就是它本身</span></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>; <span class="comment">//对半剖分</span></span><br><span class="line">    build(p*<span class="number">2</span>,l,mid); <span class="comment">//左儿子</span></span><br><span class="line">    build(p*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r); <span class="comment">//右儿子</span></span><br><span class="line">    t[p].dat=max(t[p*<span class="number">2</span>].dat,t[p*<span class="number">2</span>+<span class="number">1</span>].dat); <span class="comment">//最值，可换min</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMQ问题&amp;ST表 浅析</title>
      <link href="/2019/02/15/RMQ%E9%97%AE%E9%A2%98&amp;ST%E8%A1%A8%20%E6%B5%85%E6%9E%90/"/>
      <url>/2019/02/15/RMQ%E9%97%AE%E9%A2%98&amp;ST%E8%A1%A8%20%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是RMQ问题？"><a href="#什么是RMQ问题？" class="headerlink" title="什么是RMQ问题？"></a>什么是RMQ问题？</h1><p>RMQ(Range Min/Max Query):</p><p>对于长度为n的数组A，回答若干询问<code>RMQ(A,i,j)(i,j&lt;=n-1)</code>返回数组A中下标在i,j范围内的最小（大）值，即<strong>RMQ问题是指求区间最值的问题</strong>。</p><p>解决方式：</p><ul><li>朴素算法：每查询一次为O(n)</li><li>ST算法：高效，以O(n log n)的预处理代价，换取O(1)的查询时性能</li></ul><a id="more"></a><h1 id="ST算法"><a href="#ST算法" class="headerlink" title="ST算法"></a>ST算法</h1><p>令：<strong>f[i,j]</strong>代表从第i个数起连续2^j个数中的最大值（因此要用倍增）</p><p>从下图可以看出：<code>f[0][1]=max(f[0][0],f[1][0]), …… f[[0][2]=max(f[0][1],f[2][1]) ……</code></p><p><img src="http://t1.aixinxi.net/o_1d3omninkbgf1p8l17ek1hb41puia.png-w.jpg" alt="ST表原理"></p><p> 采用动态规划的思想：显然<code>f[i,j]=max(f[i,j-1],f[i+2^(j-1),j-1])</code></p><p>所以，我们需要建立ST表，也就是上文中的f数组。生成ST表是一次预处理，此后都是O(1)的查询了。</p><h2 id="建立ST表"><a href="#建立ST表" class="headerlink" title="建立ST表"></a>建立ST表</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) f[i][<span class="number">0</span>]=a[i]; <span class="comment">//初始化，第0列(j=0)就是a[i]。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">20</span>; j++)  <span class="comment">//j&lt;20很大啦，够用！2^20=1048576</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i+(<span class="number">1</span>&lt;&lt;j)&lt;=n+<span class="number">1</span>; i++)</span><br><span class="line">f[i][j]=max(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br></pre></td></tr></table></figure><p>查询时，只需取在ST表中找2段头尾满足区间范围进行拼凑，有重叠覆盖不影响结果。</p><p>Why?我们来模拟一下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设A=2，6，4，8，4，8，4，8</span><br><span class="line">求RMQ(A,0,5)[MAX值]=max(RMQ(A,0,3),RMQ(A,2,5))，无论是直接求还是分两段重复的区间求的结果都是8</span><br><span class="line">因为不是运算，所以有重叠部分是可以的哦！</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>设：范围是 [m,n] ,这个范围不会是刚好2 ^k的长度，我们就用2段区间来拼凑：</p><p>即<code>[m,m+2^k-1]</code>和<code>[n-2^k+1,n]</code> (拼凑后头尾满足[m,n],中间允许重叠)</p><p>因此查询结果即为：<code>RMQ[A,m,n]=max(f[m][k],f[n-(1&lt;&lt;k)+1][k]);</code></p><p>其中2^k&lt;=(n-m+1) 则 <code>k=log2(n-m+1);</code></p><p>举个例子：查询<code>RMQ[A,1,6]=max(f[1][2],f[3][2])</code></p><p><img src="http://t1.aixinxi.net/o_1d3oq2ihs1u8e11l5snpbs21mgoa.png-w.jpg" alt="ST表举例"></p><h3 id="log对数函数"><a href="#log对数函数" class="headerlink" title="log对数函数"></a>log对数函数</h3><p>这里的log来说一下，对数是对求幂的逆运算，正如除法是乘法的倒数</p><p>如果a^x =N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数，记作x=loga N，读作以a为底N的对数，其中a叫做对数的底数，N叫做真数。</p><p>比如说2^5=32，log2 32=5，求的是n次方</p><h1 id="ST表例题"><a href="#ST表例题" class="headerlink" title="ST表例题"></a>ST表例题</h1><h2 id="【模板】ST表-Luogu"><a href="#【模板】ST表-Luogu" class="headerlink" title="【模板】ST表-Luogu"></a><a href="https://www.luogu.org/problemnew/show/P3865" target="_blank" rel="noopener">【模板】ST表-Luogu</a></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000001</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],lg[maxn],f[maxn][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="comment">//读入&amp;预处理</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        f[i][<span class="number">0</span>]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">20</span>; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i+(<span class="number">1</span>&lt;&lt;j)&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">            f[i][j]=max(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    <span class="comment">//回答每个询问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> l,r; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">int</span> k=log2(r-l+<span class="number">1</span>),ans=max(f[l][k],f[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]); <span class="comment">//直接使用cmath头文件里的`log2`函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="质量检测-Luogu"><a href="#质量检测-Luogu" class="headerlink" title="质量检测-Luogu"></a><a href="https://www.luogu.org/problemnew/show/P2251" target="_blank" rel="noopener">质量检测-Luogu</a></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//裸的模版题，只不过是没有询问需要自己“手动添加”罢了</span></span><br><span class="line"><span class="comment">//还有一个点就是题目中求的是min值就要将原模版中的所有max改成min才能pass哦</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">25</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;f[i][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=<span class="number">20</span>; k++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    <span class="keyword">if</span>(i+(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>&lt;=n) f[i][k]=min(f[i][k<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;(k<span class="number">-1</span>))][k<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n-m+<span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> s=log2(m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min(f[i][s],f[i+m-(<span class="number">1</span>&lt;&lt;s)][s]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RMQ问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅地使用Hexo搭建自己的静态博客3</title>
      <link href="/2019/01/22/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A23/"/>
      <url>/2019/01/22/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A23/</url>
      
        <content type="html"><![CDATA[<h1 id="关联GitHub账号！"><a href="#关联GitHub账号！" class="headerlink" title="关联GitHub账号！"></a>关联GitHub账号！</h1><p>看了之前的教程，你可能会有一个疑问：woc！输入密码真<del>jb</del>烦人！有没有什么方便的方法让我可以在提交时免密码登陆呢？</p><p>为了每一次部署不必一种输入密码，我们可以生成秘钥，然后提交到GitHub，进行关联，那么你下次就不需要再输入密码了。免密提交：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用你注册GitHub时的邮箱号，进行秘钥生成</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxxx@qq.com"</span></span><br><span class="line"><span class="comment"># 系统就会生成一个隐藏文件夹.ssh</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 复制公钥</span></span><br><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure><a id="more"></a><p>在公钥出现后复制下来，切记不要把公钥泄露。大概是这样的：<img src="http://t1.aixinxi.net/o_1d1qtbh4ls97up51h3mecaarda.png-w.jpg" alt="这个"></p><p>来到GitHub，点击头像，进入设置，然后点击SSH and GPG keys，创建新的SSH，将之前复制的公钥黏贴，提交，OK。</p><p><img src="https://upload-images.jianshu.io/upload_images/3478485-9a6fe8e8a47d59dc.png" alt="这个"></p><p><img src="https://upload-images.jianshu.io/upload_images/3478485-92b2d4a66901907b.png" alt="这个"></p><p><img src="https://upload-images.jianshu.io/upload_images/3478485-94a0d1a2f04727f6.png" alt="这个"></p><p>记得，点击的是SSH keys那一行的新建按钮。</p><h1 id="发布文章！"><a href="#发布文章！" class="headerlink" title="发布文章！"></a>发布文章！</h1><h2 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h2><p>终端进入blog文件夹，输入<code>hexo new 文章名称</code>。执行之后，就会在<code>~/blog/source/_posts/博客名称.md</code>里自动创建“博客名称”.md的markdown文件，然后你就可以输入内容。</p><h3 id="文章front-matter"><a href="#文章front-matter" class="headerlink" title="文章front-matter"></a>文章front-matter</h3><p>.md是markdown的文件后缀名。在第一篇有介绍过用什么软件可以打开它。之后，你可以看到typora打开的窗口中上方有一个框框，储存的是文章的各种元素。它叫Front-matter，是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在typora中显示的是一个框框，是因为其主题的设置（美化）。在普通编辑器中看到的就是上面这个样子。</p><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。这里选取一些常用的：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td></td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td></tr></tbody></table><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><h2 id="发布博文"><a href="#发布博文" class="headerlink" title="发布博文"></a>发布博文</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后去<code>username.github.io</code>查看，如果有你的博文在上面，那么就成功了！</p><h2 id="删除博文"><a href="#删除博文" class="headerlink" title="删除博文"></a>删除博文</h2><p>进入<code>~/blog/source/_posts</code>就可以看到你之前发的所有文章。直接删除文件并更新博客即可。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.jianshu.com/p/77db3862595c" target="_blank" rel="noopener">https://www.jianshu.com/p/77db3862595c</a></li></ul><p><em>欢迎提出意见！</em></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅地使用Hexo搭建自己的静态博客2</title>
      <link href="/2019/01/21/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A22/"/>
      <url>/2019/01/21/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A22/</url>
      
        <content type="html"><![CDATA[<h1 id="继续！"><a href="#继续！" class="headerlink" title="继续！"></a>继续！</h1><p>既然我们已经完成了Hexo的安装，那么就是开始使用了。请确保以下步骤在你正确安装完Hexo之后进行。</p><a id="more"></a><h3 id="创建一个blog文件夹"><a href="#创建一个blog文件夹" class="headerlink" title="创建一个blog文件夹"></a>创建一个blog文件夹</h3><p>打开终端，输入<code>mkdir blog</code>。这里的blog可以是你想要的名字，这个文件夹将会作为你今后的Hexo博客的根目录。你的主题设置、博客文章等都会保存在这里。</p><p>使用<code>cd blog</code>进入目录。记住这个代码，这将是你以后的常用指令（在你执行Hexo来更新、部署你的博客时，<em>需要进入你的博客文件夹操作</em>，否则会报错）。</p><h3 id="开启本地服务"><a href="#开启本地服务" class="headerlink" title="开启本地服务"></a>开启本地服务</h3><p>既然配置完了Hexo，我们就可以开启本地服务了。进入文件夹，输入<code>hexo s</code>开启本地服务。接下来，你可以看到<img src="http://t1.aixinxi.net/o_1d1nvmghl1u7510cua0mtto7ria.png-w.jpg" alt="这个"></p><p>把网址复制下来，输入到浏览器里打开，就可以看到类似于这样子的界面：<img src="https://upload-images.jianshu.io/upload_images/3478485-7c18ba82bb6dd688.png" alt="这个"></p><p>到这里说明你的环境以及没有问题了，成功了搭建起了博客框架。</p><p>注：<code>hexo s</code>这个命令其实挺有用的，可以看到编辑后博客的样子（不是网页！别人如果登陆这个本地网址也看不到你的博客），但用时比发布时间短，可以快速知道blog的样子。</p><h1 id="GitHub-Page关联"><a href="#GitHub-Page关联" class="headerlink" title="GitHub Page关联"></a>GitHub Page关联</h1><p><a href="https://baike.baidu.com/item/github/10145341?fr=aladdin" target="_blank" rel="noopener">GitHub简介</a>，就是一个代码托管平台。有个功能叫做GitHub Page，用于静态页面的项目托管，Hexo博客一般会先选择将它托管在这里。先来注册一下：<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>。可以看到这样：<img src="http://t1.aixinxi.net/o_1d1o0umlo7104n55qv143o1dpfa.png-w.jpg" alt="这个"></p><p>输入username，注意一下，这里的名字将关联到你博客网址（GitHub版）的名称，慎重！<u>我原来把residual打错了于是又折腾了一个23333！</u>第二行输入邮箱、第三行输入密码。密码只输一次，小心一点。</p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>由于GitHub网站是纯英文的，没有翻译有些人可能看得难受。在这里推荐使用Chrome谷歌浏览器。它在浏览纯英文网页时会有一个网页翻译的功能，方便理解。<img src="http://t1.aixinxi.net/o_1d1o34b8e1ctu1upi13eldpa1l6ba.png-w.jpg" alt="这个"></p><h2 id="建立仓库"><a href="#建立仓库" class="headerlink" title="建立仓库"></a>建立仓库</h2><p>注册完后显示的界面就是你的仪表盘。右上角找到新建图标，点击<em>New repository</em>，如图：<img src="https://upload-images.jianshu.io/upload_images/3478485-918befac816ff5d6.png" alt="这个"></p><p>跳出该界面：<img src="https://upload-images.jianshu.io/upload_images/3478485-d451ae9bb81c6d0e.png" alt="这个"></p><blockquote><p> 这里的owner就是你当前的用户名。创建仓库的名字必须为<code>username.github.io</code>（就是那个name的输入框里填写的内容），我的用户名为ResidualNight，因此我创建的仓库名就是<strong>ResidualNight.github.io</strong>，这是很关键的一点，很重要。输入名字后，直接点最下面绿色的按钮，创建新仓库。<strong>切记用户名的正确与否</strong>！</p></blockquote><h2 id="关联博客"><a href="#关联博客" class="headerlink" title="关联博客"></a>关联博客</h2><p>打开blog根目录。这里有一个文件叫做”_config.yml”，打开。如果有好的编辑器可以用，如：visual studio code等，正常情况下直接用文本编辑可以打开。<img src="http://t1.aixinxi.net/o_1d1o3mcc21oji1boei4uq2n1p5na.png-w.jpg" alt="这个"></p><p>找到如图所示的代码段，输入和我一样的内容。至于我的ResidualNight，替换成你自己的GitHub用户名。然后保存文件。</p><p>回到终端进入目录，输入命令（“#”为注释内容，不用输）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产生静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 部署到GitHub page上</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>以后，我们在更新文章、主题设置时都会运用到这两个命令，注意顺序，先g后d。在<code>hexo d</code>后，会要求输入GitHub的账户名称和密码。</p><p><code>hexo g</code>正常：<img src="http://t1.aixinxi.net/o_1d1o9q97r1a5dtue1p8u1m971878a.png-w.jpg" alt="hexo g"></p><p><code>hexo d</code>输入用户名&amp;密码图示：<img src="http://t1.aixinxi.net/o_1d1o9udq0ih9eai1jf01s2j99ia.png-w.jpg" alt="hexo d">这里注意一下，输入密码时一般是不显示你的密码的。</p><p>部署完了网页，就可以登陆网页了！浏览器输入username.github.io，就可以看到你的博客了。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.jianshu.com/p/77db3862595c" target="_blank" rel="noopener">https://www.jianshu.com/p/77db3862595c</a></li><li>想知道根目录文件夹里的文件做什么的看这里：<a href="https://hexo.io/zh-cn/docs/setup" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup</a></li></ul><p><em>欢迎提出意见！</em></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅地使用Hexo搭建自己的静态博客1</title>
      <link href="/2019/01/20/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A21/"/>
      <url>/2019/01/20/%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A21/</url>
      
        <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>如题，这个静态博客就是使用hexo制作的。如果你对此有兴趣，有探究精神（<del>又闲着没有事</del>），那么你可以来尝试制作一下你的blog！在这里，我会尽量用通俗一些的语言来阐述这一过程，那么我们开始吧！</p><p>如果你是一个大佬，这一章的内容自行跳过。<del>是大佬也不会来看我的博客了233</del></p><a id="more"></a><p>这里开始科普一下我们所需要的东西：</p><h2 id="Hexo是个什么玩意儿？"><a href="#Hexo是个什么玩意儿？" class="headerlink" title="Hexo是个什么玩意儿？"></a>Hexo是个什么玩意儿？</h2><p>看到标题，你可能会有些蒙圈：hexo是个什么鬼？这个很简单，你可以请教一下baidu以及<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a>。稍稍引用一下：</p><blockquote><p>hexo 正常来说，不需要部署到我们的服务器上。我们的服务器上保存的，其实是基于在hexo通过<u>markdown</u>编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器，这样就有了我们所看到的博客界面。简而言之：hexo是个<em>静态页面生成、上传的工具</em>。</p></blockquote><p>简单来说，就是配置好了hexo后，你只用写出博客网站的<u>markdown</u>代码（保存在一定的地方），就可以让hexo帮助你制作出含有你的博文的网页。当然你也可以自己定制网页的自定义，比如说下载他人的主题，并按自己的想法进行改进。</p><p>许多大佬、或是萌新们都会使用hexo搭建blog，毕竟人家简单、自由度还高嘛。</p><h2 id="Markdown又是个什么玩意儿？"><a href="#Markdown又是个什么玩意儿？" class="headerlink" title="Markdown又是个什么玩意儿？"></a>Markdown又是个什么玩意儿？</h2><p>这个真的就只有baidu可以帮助你了：<a href="https://baike.baidu.com/item/markdown/3245829?fr=aladdin" target="_blank" rel="noopener">Markdown强行科普</a>。其实就是在正常打字时加上一些特殊的符号让文章能够层次分明，是一种在博客、OI（编程界）里十分流行的文本语言，hexo用的就是这种流行的语言。至于具体用法，在上文的链接中有说明，如果可以，我会放到“文章”那一部分那里写～</p><p>这里比较推荐的markdown书写工具是这个：<a href="https://www.typora.io/" target="_blank" rel="noopener">typora</a>，简洁好用，支持hexo格式。</p><h2 id="‘终端’科普"><a href="#‘终端’科普" class="headerlink" title="‘终端’科普"></a>‘终端’科普</h2><p>现在有两个主流电脑操作系统：</p><ul><li>mac</li><li>windows</li></ul><p>Mac的终端名称是终端（Terminal），打开它很简单，进入启动台查找或是使用聚焦搜索查找；</p><p>Windows的终端名称一般叫做cmd，在“开始”菜单栏里找到它或是使用“运行”这个应用输入cmd（实在不会的找baidu）</p><p>打开了吗？就是你眼前这个黑黑的东西，最上方有一串白字，代表你当前的启动盘。具体怎么用等会说。</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>参考官网<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档</a>：</p><h2 id="安装Hexo的支持"><a href="#安装Hexo的支持" class="headerlink" title="安装Hexo的支持"></a>安装Hexo的支持</h2><p>Hexo的安装需要两个软件的支持，它们分别是：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>（嫌下载速度慢的看这个<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">git国内下载站</a>注意看清楚版本号和windows版本，看不懂还是使用龟速下载比较好）</p><p>mac：在终端输入<code>brew install git</code>或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</p><h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><p>在这里用命令行安装可能讲的不太清楚。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a>，下载安装。</p><p>对于Windows用户的建议：可以使用<strong>Git Bash</strong>，这是git for windows自带的一组程序，提供了Linux风格的shell。打开它的方法很简单，在<strong>桌面任意位置单击右键</strong>，选择“Git Bash Here”即可。由于Hexo的<strong>很多操作都涉及到命令行</strong>，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p><h2 id="安装Hexo！"><a href="#安装Hexo！" class="headerlink" title="安装Hexo！"></a>安装Hexo！</h2><p>在完成上述安装后，安装hexo：</p><p>在终端里输入：<code>npm install -g hexo-cli</code></p><p>mac用户可能会报错。这里使用<code>sudo npm install -g hexo-cli</code>安装。</p><h1 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h1><ul><li>Windows中：终端中<code>Ctrl + C</code>是stop的快捷键，不要使用<code>Ctrl + C</code>或<code>Ctrl + V</code>的快捷键，用右键单击标题栏。</li><li>出现问题找官网和百度</li><li>也可以去找一些其他人写的教程，我写的是通俗版的，但归根到底都是根据别人的教程<del>不然我怎么搭建的博客233</del></li><li>哦对官网上也有b站的视频可以学习：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://www.jianshu.com/p/77db3862595c" target="_blank" rel="noopener">https://www.jianshu.com/p/77db3862595c</a></li><li><a href="https://www.jianshu.com/p/a2fe56d11c4f" target="_blank" rel="noopener">https://www.jianshu.com/p/a2fe56d11c4f</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li></ul><p><em>欢迎提出意见！</em></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome</title>
      <link href="/2019/01/18/Welcome/"/>
      <url>/2019/01/18/Welcome/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello!"></a>Hello!</h1><p><strong>很高兴认识你！</strong></p><p>这里是<em>Residual Night</em>的个人博客，基于<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>&amp;&amp;<a href="https://github.com/" target="_blank" rel="noopener">github</a>搭建的静态博客。也是我人生中第一个blog。以<a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a>为主题。</p><a id="more"></a><h1 id="这是什么？"><a href="#这是什么？" class="headerlink" title="这是什么？"></a>这是什么？</h1><p>在这个blog上，主要会发表一些我的一些idea和编程笔记。至于编程，我只是一个刚接触<strong>c++</strong>的普及组+选手而已（初中苣蒻，勿喷）。但我坚信，我会在OI的道路上砥砺前行的。</p><h1 id="长风破浪会有时，直挂云帆济沧海。"><a href="#长风破浪会有时，直挂云帆济沧海。" class="headerlink" title="长风破浪会有时，直挂云帆济沧海。"></a>长风破浪会有时，直挂云帆济沧海。</h1><p>不管有没有人看得到，不管我会不会在这个博客上坚持下去，但这里总是一个梦想开始的地方，isn’t it?</p><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello World!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你好。</p><p>Hello.</p><p>こんにちは。</p>]]></content>
      
      
      <categories>
          
          <category> 个人生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> personal </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
